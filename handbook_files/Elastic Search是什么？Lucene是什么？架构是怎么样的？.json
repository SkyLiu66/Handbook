{
    "code": 10000,
    "data": "Elastic色制是什么,工作原理是怎么样的你是一个程序员,现在有三段文本,ID分别是0,1,2你需要快速找到哪段文本里还有关键词小白我们很容易想到可以依次便利这三段文本匹配文本内是否含有小白最终将符合条件的文本ID输出在数据量小的时候问题不大但如果我有上百亿条这样的数据呢如果依次便利,这一把执行下去比你喜欢的女生回你消息的速度还要慢嘿嘿嘿嘿嘿嘿像这种在海量数据中通过关键词检索出有效信息的场景非常常见比如我们网购用的某宝和某东的站内商品搜索那么问题就来了怎么处理类似的搜索场景呢好办,没有什么是加一层中间层不能解决的如果有,那就再加一层这次我们要加的中间层是elastic search看之前你点赞了吗,关注了吗,去去什么是elastic searchelastic search也就是ES是一个开源的搜索引擎它介于应用和数据之间只要将数据写入ES应用就可以通过一些关键词搜索到数据那它是怎么做到的呢我们从倒排索引聊起什么是倒排索引回到文章开头的例子依次便利文本匹配是否含有小白确实递效那有更高效的解法吗有,我们可以对文本进行切分比如ilike小白切分为ilike小白三部分这个操作叫分词分词后的每部分我们称为一个词项也就是term记录词项和文本ID的关系就会让文本上面的三段文本就变成这样当我们想要搜索小白的时候只需要匹配到小白词项就可以立马得到它所在的文档ID是0和1但这有个问题短短三句话就已经有这么多词项了要是换成三篇文档那词项就会多的离谱艾克便利词项时间复杂度是on太低效了我们可以将词项n字典序从小到大排序通过二分查找的方法直接将时间复杂度优化为olog n我们将这堆排好序的词项称为term dictionary而这些词项ID等信息的集合就叫posting list它们共同构成了一个用于搜索的数据结构就是倒排索引inverted index但倒排索引还有个问题term dictionary数据量很大放内存并不现实因此必须存放在词盘中但查询词盘是个较慢的过程有优化手段吗有我们聊一下term indexterm index是什么我们可以发现词项和词项之间有些前缀是一致的比如follow和forward前面的for是一致的如果我们将部分term前缀复用就能用更少的空间表达多个term基于这个原理我们可以将term dictionary的部分词项提取出来用这些词项的前缀信息构建出一个精简的目录数目录数的节点中存放这些词项在词盘中的偏移量也就是指向词盘中的位置这个目录数结构体积小适合放在内存中它就是所谓的term index可以用它来加速搜索当我们需要查找某个词项的时候只需要搜索term index就能快速获得词项在term dictionary中的大概位置再跳转到term dictionary中跳转到term dictionary通过少量的检索定位到词项内容Stored fields是什么到这里搜索功能就有了但有个问题前面提到的倒排索引搜索到的是文档ID我们还需要拿着这个ID找到文档内容本身才能返回给用户因此还需要有个地方存放完整的文档内容它就是Stored fields它是个行事存储结构Doc values是什么有了ID我们就能从Stored fields中取出文档内容但用户经常需要根据某个字段排序文档比如按时间排序或商品价格排序但问题就来了这些字段散落在文档里也就是说我们需要先获取Stored fields里的文档再提取出内部字段进行排序也不是说不行但其实有更高效的做法我们可以用空间换时间的思路将散落在各个文档的某个字段集中存放当我们想对某个字段排序的时候就只需要将这些集中存放的字段一次性读取出来就能做到针对性的进行排序这个劣势存储结构就是所谓的Doc valuesSegment是什么在上文中我们介绍了四种关键的结构倒排索引用于搜索Term index用于加速搜索Stored fields用于存放文档的原始信息以及Doc values用于排序和聚合这些结构共同组成了一个复合文件也就是所谓的Segment它是一个具备完整搜索功能的最小单元Lucent是什么我们可以用多个文档生成一份Segment如果新增文档时还是写入到这份Segment那就得同时更新Segment内部的多个数据结构这样并发读写使性能肯定会受影响那怎么办呢我们定个规矩Segment一旦生成则不能再被修改如果还有新的文档要写入那就生成新的Segment这样老的Segment只需要负责读写则生成新的Segment同时保证了读和写的性能但Segment变多了我们怎么知道要搜索的数据在哪个Segment里呢问题不大并发同时读多个Segment就好了随着数据量增大Segment的文件越写越多文件句柄被耗尽那是指日可待啊是的但这个也好解决我们可以不定期合并多个小Segment变成一个大Segment也就是断合并Segment Merging这样文件数量就可控了到这里上面提到的多个Segment就共同构成了一个单机文本检索库它其实就是非常有名的开源基础搜索库Lucent不少知名搜索引擎都是基于它构建的比如我们今天介绍的ES但这个Lucent属实过于简陋像什么高性能高扩展性高可用它是一个都不沾我们来看一下怎么优化它高性能Lucent作为一个搜索库可以写入大量数据并对外提供搜索能力多个调用方同时读写同一个Lucent必然导致争抢计算资源抢不到资源的一方就得等待这不纯纯浪费时间吗有解决方案吗有首先对写入Lucent的数据进行分类比如体育新闻和八卦新闻数据算两类每一类是一个Index Name然后根据Index Name新增Lucent的数量将不同类数据写入到不同的Lucent中读取数据时根据需要搜索不同的Index Name这就大大降低了单个Lucent的压力但单个Index Name里数据依然可能过多于是可以将单个Index Name的同类数据拆分成好几份每份是一个Shad分片每个Shad分片本质上就是一个独立的Lucent库这样我们就可以将读写操作分摊到多个分片中去大大降低了争抢提升了系统性能高扩展性随着分片变多如果分片都在同一台机器上的话就会导致单机CPU和内存过高影响整体系统性能于是我们可以申请更多的机器将分片分散部署在多台机器上这每一台机器就是一个Node我们可以通过增加Node缓解机器CPU过高带来的性能问题高可用到这里问题又又来了如果其中一个Node挂了那Node里所有分片都无法对外提供服务了为了保证服务的高可用我们可以给分片多加几个副本将分片分为Primary Shad和Replica Shad也就是主分片和副本分片主分片会将数据同步给副本分片副本分片既可以同时提供读操作还能在主分片挂了的时候升级成新的主分片让系统保持正常运行保证了系统的高可用Node角色分化搜索架构需要支持的功能很多既要负责管理集群又要储存管理数据还要处理客户端的搜索请求如果每个Node都支持这几个功能那当集群有数据压力需要扩容Node时就会顺带把其他能力也一起扩容但其实其他能力完全够用不需要跟着扩容这就有些浪费了因此我们可以将这几类功能拆开给集群里的Node赋予角色身份不同的角色负责不同的功能比如负责管理集群的叫主节点MasterNode负责存储管理数据的叫数据节点DataNode负责接受客户端搜索查询请求的叫协调节点CoordinateNode集群规模小的时候一个Node可以同时充当多个角色随着集群规模变大可以让一个Node一个角色去中心混上面提到了主节点那就意味着还有个选主的过程每个Node都是独立的需要有个机制协调Node间的数据我们很容易想到可以像卡夫卡那样引入一个中心节点Zookeeper但如果不想引入中心节点还有其他更轻量的方案吗有 去中心化我们可以在Node间引入魔改过的Ref的模块在节点间互相同步数据让所有Node看到的集群数据状态都是一致的这样 这样 怎么这么拗口啊这样 集群内的Node就能参与选主过程还能了解到集群内某个Node是不是挂了等信息ES是什么好了 到这里当初那个简陋的Lucent就成了一个高性能高扩展性 高可用支持持久化的分布式搜索引擎它就是我们常说的Elasticsearch它对外提供HTTP接口任何语言的客户端都可以通过HTTP接口接入ES实现对数据的增删改查现在我们了解完ES的架构再来用两个实际例子将这些概念串起来浅看下它的工作原理ES的写入流程当客户端应用发起数据写入请求请求会先发到协调节点协调节点判断数据应该写入到哪个数据节点里的哪个分片找到主分片并写入分片底层是Lucent所以最终是将数据写入到Lucent库里的Segment内将数据固化为道牌索引和Stored Fields以及Dock Values等多种结构主分片写入成功后会将数据同步给副本分片副本分片写入完成后主分片会响应协调节点一个Ack意思是写入完成最后协调节点响应客户端应用写入完成ES的搜索流程ES的搜索流程分为两个阶段分别是查询阶段Query Phase和获取阶段Fetch Phase我们分别看一下查询阶段当客户端应用发起搜索请求请求会先发到集群中的协调节点协调节点根据Index Name的信息可以了解到Index Name被分为了几个分片以及这些分片分散在哪个数据节点上将请求转发到这些数据节点的分片上面搜索请求到达分片后分片底层的Lucent库会并发搜索多个Segment利用每个Segment内部的倒排索引获取到对应文档ID并结合Dock Values获得排序信息分片将结果聚合返回给协调节点协调节点对多个分片中拿到的数据进行排序聚合舍弃大部分不需要的数据获取阶段协调节点再次拿着文档ID请求数据节点里的分片分片底层的Lucent库会从Segment内的Stored Fields读出完整文档内容并返回给协调节点协调节点最终将数据结果返回给客户端完成整个搜索过程现在大家通了吗好了如果你觉得这期视频对你有帮助记得转发给你那不成器的兄弟文字版的笔记见评论区最后遗留一个问题你听说过Redis吗你知道它的架构是怎么样的吗点赞超过一万下期我们会聊聊这个话题如果你感兴趣记得关注我们下期见by bwd6",
    "msg": "多媒体文件转换文本成功!"
}